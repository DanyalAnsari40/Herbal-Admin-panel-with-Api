<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Attendance</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: {
              50: '#eff6ff',
              100: '#dbeafe',
              500: '#3b82f6',
              600: '#2563eb',
              700: '#1d4ed8',
            }
          }
        }
      }
    }
  </script>
</head>
<body class="bg-gradient-to-br from-slate-50 to-green-50 font-sans min-h-screen flex flex-col">
  <header class="bg-gradient-to-r from-green-600 via-green-700 to-indigo-700 text-white shadow-lg">
    <div class="container mx-auto px-6 py-4 flex justify-between items-center">
      <h1 class="text-2xl font-bold flex items-center gap-2">
        <i class="fa-solid fa-calendar-check"></i> Attendance
      </h1>
      <a href="/admin" class="bg-white/10 hover:bg-white/20 px-4 py-2 rounded-lg transition-all duration-200 backdrop-blur-sm flex items-center gap-2">
        <i class="fas fa-arrow-left"></i> Back to Dashboard
      </a>
    </div>
  </header>
  <main class="flex-grow flex items-center justify-center">
    <div class="w-full max-w-lg p-8 bg-white rounded-3xl shadow-2xl border border-gray-100">
      <h2 class="text-3xl font-extrabold text-center text-green-700 mb-6 flex items-center justify-center gap-2">
        <i class="fa-solid fa-user-clock"></i> Mark Your Attendance
      </h2>
      <div class="space-y-8">
        <div class="flex flex-col md:flex-row gap-6 items-center justify-center">
          <div class="flex flex-col items-center flex-1">
            <label class="block text-gray-700 font-semibold mb-2" for="checkInBtn">Check In</label>
            <button id="checkInBtn" class="w-32 h-16 rounded-xl border-2 border-green-500 bg-green-50 text-green-700 font-bold text-lg shadow hover:bg-green-100 transition-all flex items-center justify-center gap-2">
              <i class="fa-solid fa-sign-in-alt"></i> Check In
            </button>
            <span id="checkInTime" class="mt-2 text-green-700 font-semibold"></span>
          </div>
          <div class="flex flex-col items-center flex-1">
            <label class="block text-gray-700 font-semibold mb-2" for="checkOutBtn">Check Out</label>
            <button id="checkOutBtn" class="w-32 h-16 rounded-xl border-2 border-indigo-500 bg-indigo-50 text-indigo-700 font-bold text-lg shadow hover:bg-indigo-100 transition-all flex items-center justify-center gap-2" disabled>
              <i class="fa-solid fa-sign-out-alt"></i> Check Out
            </button>
            <span id="checkOutTime" class="mt-2 text-indigo-700 font-semibold"></span>
          </div>
        </div>
        <div class="flex flex-col items-center">
          <span class="text-xl font-bold text-blue-700 mb-2">Working Time</span>
          <span id="timerDisplay" class="text-3xl font-mono text-blue-800"></span>
        </div>
        <div id="attendanceMessage" class="text-center text-lg font-semibold mt-4"></div>
      </div>
    </div>
  </main>
  <script>
    let timerInterval = null;
    let startTime = null;
    let endTime = null;

    const checkInBtn = document.getElementById('checkInBtn');
    const checkOutBtn = document.getElementById('checkOutBtn');
    const checkInTime = document.getElementById('checkInTime');
    const checkOutTime = document.getElementById('checkOutTime');
    const timerDisplay = document.getElementById('timerDisplay');
    const attendanceMessage = document.getElementById('attendanceMessage');

    function formatTime(date) {
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
    }

    function formatDuration(ms) {
      const totalSeconds = Math.floor(ms / 1000);
      const hours = Math.floor(totalSeconds / 3600);
      const minutes = Math.floor((totalSeconds % 3600) / 60);
      const seconds = totalSeconds % 60;
      return `${hours.toString().padStart(2, '0')}:${minutes
        .toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    checkInBtn.addEventListener('click', async () => {
      if (timerInterval) return;
      checkInBtn.disabled = true;
      attendanceMessage.textContent = '';
      try {
        const res = await fetch('/admin/attendence/checkin', { method: 'POST' });
        const data = await res.json();
        if (data.success) {
          startTime = new Date(data.checkIn);
          checkInTime.textContent = `Checked in at: ${formatTime(startTime)}`;
          checkOutBtn.disabled = false;
          timerDisplay.textContent = '00:00:00';
          timerInterval = setInterval(() => {
            const now = new Date();
            timerDisplay.textContent = formatDuration(now - startTime);
          }, 1000);
        } else {
          attendanceMessage.textContent = data.error || 'Check-in failed.';
          checkInBtn.disabled = false;
        }
      } catch (err) {
        attendanceMessage.textContent = 'Check-in failed (network error).';
        checkInBtn.disabled = false;
      }
    });

    checkOutBtn.addEventListener('click', async () => {
      if (!timerInterval) return;
      checkOutBtn.disabled = true;
      attendanceMessage.textContent = '';
      try {
        const res = await fetch('/admin/attendence/checkout', { method: 'POST' });
        const data = await res.json();
        if (data.success) {
          endTime = new Date(data.checkOut);
          checkOutTime.textContent = `Checked out at: ${formatTime(endTime)}`;
          clearInterval(timerInterval);
          timerInterval = null;
          timerDisplay.textContent = data.totalTime;
          attendanceMessage.textContent = 'Attendance saved!';
        } else {
          attendanceMessage.textContent = data.error || 'Check-out failed.';
          checkOutBtn.disabled = false;
        }
      } catch (err) {
        attendanceMessage.textContent = 'Check-out failed (network error).';
        checkOutBtn.disabled = false;
      }
    });
  </script>
  <footer class="bg-gray-900 text-gray-300 py-6 mt-12">
    <div class="container mx-auto px-6 text-center">
      <div class="flex items-center justify-center space-x-4 mb-2">
        <i class="fas fa-shield-alt text-green-400"></i>
        <span class="font-semibold text-white">Admin Panel</span>
        <i class="fas fa-shield-alt text-green-400"></i>
      </div>
      <p class="text-sm">© 2025 Admin Panel. All rights reserved. | Secure • Reliable • Efficient</p>
    </div>
  </footer>
</body>
</html> 